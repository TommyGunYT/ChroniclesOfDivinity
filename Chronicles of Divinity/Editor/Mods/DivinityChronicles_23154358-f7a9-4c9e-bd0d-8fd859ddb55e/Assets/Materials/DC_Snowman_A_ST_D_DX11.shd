[Vertex shader]


#include "Shaders/DX11/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_DX11.shdh"

struct VertexInput
{
	float3 Position : POSITION0;
	float2 TexCoords0 : TEXCOORD0;
	float3 LocalNormal : NORMAL0;
};

struct VertexOutput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
	float3 ViewNormal : TEXCOORD1;
};

cbuffer CB_PerInstance
{
	row_major float4x4 WorldMatrix;
}

VertexOutput main(VertexInput In)
{
	VertexOutput Out;

	//World space position
	float4 worldPosition = mul(WorldMatrix, float4(In.Position, 1.0f));

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	Out.TexCoords0 = In.TexCoords0;
	//Normalize Local Normal
	float3 localNormalNormalized = normalize(In.LocalNormal);

	//World space Normal
	float3 worldNormal = mul((float3x3)(WorldMatrix), localNormalNormalized);

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	float3 viewSpaceNormal = mul((float3x3)(global_View), worldNormalNormalized);

	Out.ViewNormal = viewSpaceNormal;


	return Out;
}


[Fragment shader]


#include "Shaders/DX11/CommonHelpers.shdh"
#include "Shaders/DX11/PBR.shdh"

struct PixelInput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
	float3 ViewNormal : TEXCOORD1;
};

struct PixelOutput
{
	float4 Color0 : SV_Target0;
	float4 Color1 : SV_Target1;
	float4 Color2 : SV_Target2;
	float4 Color3 : SV_Target3;
	float4 Color4 : SV_Target4;
};

uniform SamplerState _DefaultWrapSampler;
uniform Texture2D Texture2DParameter_bc5e073cfd3543dda5642a31a466d01e_DefaultWrapSampler;
uniform Texture2D Texture2DParameter_0bcbecf161384ac28952bd66ea9204b9_DefaultWrapSampler;
uniform Texture2D Texture2DParameter_536643a49f584db4b55b0b5136f59778_DefaultWrapSampler;
uniform float _OpacityFade;

void CalculateMatEmissiveColor(float2 in_0,
	out float3 out_0)
{
	float4 Local0 = Texture2DParameter_bc5e073cfd3543dda5642a31a466d01e_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	out_0 = float3(Local1, Local1, Local1);
}

void CalculateMatBaseColor(float2 in_0,
	out float3 out_0)
{
	float4 Local0 = Texture2DParameter_0bcbecf161384ac28952bd66ea9204b9_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.x;
	float Local3 = Local0.w;
	out_0 = Local1;
}

void CalculateMatMetalMask(float2 in_0,
	out float out_0)
{
	float4 Local0 = Texture2DParameter_536643a49f584db4b55b0b5136f59778_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	out_0 = Local1.x;
}

void CalculateMatReflectance(float2 in_0,
	out float out_0)
{
	float4 Local0 = Texture2DParameter_0bcbecf161384ac28952bd66ea9204b9_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.x;
	float Local3 = Local0.w;
	out_0 = Local2;
}

void CalculateMatRoughness(float2 in_0,
	out float out_0)
{
	float4 Local0 = Texture2DParameter_0bcbecf161384ac28952bd66ea9204b9_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.x;
	float Local3 = Local0.w;
	out_0 = Local3;
}

PixelOutput main(PixelInput In)
{
	PixelOutput Out;

	float3 matEmissiveColor;
	CalculateMatEmissiveColor(In.TexCoords0, matEmissiveColor);
	float3 viewNormalNormalized = normalize(In.ViewNormal);

	float3 matBaseColor;
	CalculateMatBaseColor(In.TexCoords0, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(In.TexCoords0, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(In.TexCoords0, matReflectance);
	float matRoughness;
	CalculateMatRoughness(In.TexCoords0, matRoughness);
	GBufferData gBufferData;
	gBufferData.Emissive = matEmissiveColor;
	gBufferData.ViewSpaceNormal = viewNormalNormalized;
	gBufferData.BaseColor = matBaseColor;
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = matRoughness;
	gBufferData.Reflectance = matReflectance;
	gBufferData.MetalMask = matMetalMask;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = float4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, Out.Color0, Out.Color1, Out.Color2, Out.Color3, Out.Color4);

	return Out;
}
