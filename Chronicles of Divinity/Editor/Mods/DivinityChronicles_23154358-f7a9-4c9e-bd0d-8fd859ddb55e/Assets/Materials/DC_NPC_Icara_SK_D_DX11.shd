[Vertex shader]


#include "Shaders/DX11/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_DX11.shdh"

struct VertexInput
{
	uint4 BoneIndices : BLENDINDICES0;
	float4 BoneWeights : BLENDWEIGHT0;
	float3 Position : POSITION0;
	float2 TexCoords0 : TEXCOORD0;
	float3 LocalNormal : NORMAL0;
	float3 LocalBinormal : BINORMAL0;
	float3 LocalTangent : TANGENT0;
};

struct VertexOutput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
	float3 WorldNormal : TEXCOORD1;
	float3 WorldBinormal : TEXCOORD2;
	float3 WorldTangent : TEXCOORD3;
};

cbuffer CB_BoneMatrices
{
	row_major float3x4 BoneMatrices[128];
}

cbuffer CB_PerInstance
{
	row_major float4x4 WorldMatrix;
}

VertexOutput main(VertexInput In)
{
	VertexOutput Out;

	row_major float3x4 boneMatrix1 = BoneMatrices[In.BoneIndices.x];
	row_major float3x4 boneMatrix2 = BoneMatrices[In.BoneIndices.y];
	row_major float3x4 boneMatrix3 = BoneMatrices[In.BoneIndices.z];
	row_major float3x4 boneMatrix4 = BoneMatrices[In.BoneIndices.w];
	//World space position
	float4 worldPosition = float4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.x * mul(boneMatrix1, float4(In.Position, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.y * mul(boneMatrix2, float4(In.Position, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.z * mul(boneMatrix3, float4(In.Position, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.w * mul(boneMatrix4, float4(In.Position, 1.0f))));
	worldPosition = mul(WorldMatrix, worldPosition);

	//Projected position
	float4 projectedPosition = mul(global_ViewProjection, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	Out.TexCoords0 = In.TexCoords0;
	//Normalize Local Normal
	float3 localNormalNormalized = normalize(In.LocalNormal);

	//World space Normal
	float3 worldNormal = float3(0.0f, 0.0f, 0.0f);
	worldNormal = (worldNormal + (In.BoneWeights.x * mul(boneMatrix1, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (In.BoneWeights.y * mul(boneMatrix2, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (In.BoneWeights.z * mul(boneMatrix3, float4(localNormalNormalized, 0.0f))));
	worldNormal = (worldNormal + (In.BoneWeights.w * mul(boneMatrix4, float4(localNormalNormalized, 0.0f))));
	worldNormal = mul(WorldMatrix, float4(worldNormal, 0.0f)).xyz;

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	Out.WorldNormal = worldNormalNormalized;

	//Normalize Local Binormal
	float3 localBinormalNormalized = normalize(In.LocalBinormal);

	//World space Binormal
	float3 worldBinormal = float3(0.0f, 0.0f, 0.0f);
	worldBinormal = (worldBinormal + (In.BoneWeights.x * mul(boneMatrix1, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (In.BoneWeights.y * mul(boneMatrix2, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (In.BoneWeights.z * mul(boneMatrix3, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = (worldBinormal + (In.BoneWeights.w * mul(boneMatrix4, float4(localBinormalNormalized, 0.0f))));
	worldBinormal = mul(WorldMatrix, float4(worldBinormal, 0.0f)).xyz;

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(worldBinormal);

	Out.WorldBinormal = worldBinormalNormalized;

	//Normalize Local Tangent
	float3 localTangentNormalized = normalize(In.LocalTangent);

	//World space Tangent
	float3 worldTangent = float3(0.0f, 0.0f, 0.0f);
	worldTangent = (worldTangent + (In.BoneWeights.x * mul(boneMatrix1, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (In.BoneWeights.y * mul(boneMatrix2, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (In.BoneWeights.z * mul(boneMatrix3, float4(localTangentNormalized, 0.0f))));
	worldTangent = (worldTangent + (In.BoneWeights.w * mul(boneMatrix4, float4(localTangentNormalized, 0.0f))));
	worldTangent = mul(WorldMatrix, float4(worldTangent, 0.0f)).xyz;

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(worldTangent);

	Out.WorldTangent = worldTangentNormalized;


	return Out;
}


[Fragment shader]


#include "Shaders/DX11/CommonHelpers.shdh"
#include "Shaders/GlobalConstants_PS_DX11.shdh"
#include "Shaders/DX11/PBR.shdh"

struct PixelInput
{
	float4 ProjectedPosition : SV_Position0;
	float2 TexCoords0 : TEXCOORD0;
	float3 WorldNormal : TEXCOORD1;
	float3 WorldBinormal : TEXCOORD2;
	float3 WorldTangent : TEXCOORD3;
};

struct PixelOutput
{
	float4 Color0 : SV_Target0;
	float4 Color1 : SV_Target1;
	float4 Color2 : SV_Target2;
	float4 Color3 : SV_Target3;
	float4 Color4 : SV_Target4;
};

uniform SamplerState _DefaultWrapSampler;
uniform Texture2D Texture2DParameter_02ad37428c1b4883b14fb722e06e39dd_DefaultWrapSampler;
uniform Texture2D Texture2DParameter_68bc7bbf4d3a40bfad5f76bc466e197e_DefaultWrapSampler;
uniform Texture2D Texture2DParameter_d95dd0960f214d3ca9f98d65f5902b8b_DefaultWrapSampler;
uniform float _OpacityFade;

void CalculateMatNormal(float2 in_0,
	out float3 out_0)
{
	float4 Local0 = Texture2DParameter_02ad37428c1b4883b14fb722e06e39dd_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.x;
	float Local3 = Local0.y;
	out_0 = Local1;
}

void CalculateMatBaseColor(float2 in_0,
	out float3 out_0)
{
	float4 Local0 = Texture2DParameter_68bc7bbf4d3a40bfad5f76bc466e197e_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	out_0 = Local1;
}

void CalculateMatMetalMask(float2 in_0,
	out float out_0)
{
	float4 Local0 = Texture2DParameter_02ad37428c1b4883b14fb722e06e39dd_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.x;
	float Local3 = Local0.y;
	out_0 = Local2;
}

void CalculateMatReflectance(float2 in_0,
	out float out_0)
{
	float4 Local0 = Texture2DParameter_d95dd0960f214d3ca9f98d65f5902b8b_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Get needed components
	float Local1 = Local0.x;
	out_0 = Local1;
}

void CalculateMatRoughness(float2 in_0,
	out float out_0)
{
	float4 Local0 = Texture2DParameter_02ad37428c1b4883b14fb722e06e39dd_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_0);
	//[Local0] Convert normalmaps to tangent space vectors
	Local0.xyzw = Local0.wzyx;
	Local0.xyz = ((Local0.xyz * 2.0f) - 1.0f);
	Local0.z = -(Local0.z);
	Local0.xyz = normalize(Local0.xyz);
	//[Local0] Get needed components
	float3 Local1 = Local0.xyz;
	float Local2 = Local0.x;
	float Local3 = Local0.y;
	out_0 = Local3;
}

PixelOutput main(PixelInput In)
{
	PixelOutput Out;

	float3 matNormal;
	CalculateMatNormal(In.TexCoords0, matNormal);
	//Normalize World Normal
	float3 worldNormalNormalized = normalize(In.WorldNormal);

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(In.WorldBinormal);

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(In.WorldTangent);

	row_major float3x3 NBT = float3x3(worldTangentNormalized, worldNormalNormalized, worldBinormalNormalized);

	matNormal = mul((float3x3)(global_View), normalize(mul(matNormal, NBT)));

	float3 matBaseColor;
	CalculateMatBaseColor(In.TexCoords0, matBaseColor);
	float matMetalMask;
	CalculateMatMetalMask(In.TexCoords0, matMetalMask);
	float matReflectance;
	CalculateMatReflectance(In.TexCoords0, matReflectance);
	float matRoughness;
	CalculateMatRoughness(In.TexCoords0, matRoughness);
	GBufferData gBufferData;
	gBufferData.Emissive = float3(0.0f, 0.0f, 0.0f);
	gBufferData.ViewSpaceNormal = matNormal;
	gBufferData.BaseColor = matBaseColor;
	gBufferData.FadeOpacity = _OpacityFade;
	gBufferData.Roughness = matRoughness;
	gBufferData.Reflectance = matReflectance;
	gBufferData.MetalMask = matMetalMask;
	gBufferData.FXEmissive = true;
	gBufferData.ShadingModel = 0;
	gBufferData.Custom = float4(0.0f, 0.0f, 0.0f, 0.0f);
	EncodeGBufferData(gBufferData, Out.Color0, Out.Color1, Out.Color2, Out.Color3, Out.Color4);

	return Out;
}
